{"version":3,"sources":["component/DocumentPreview.js","component/DownloadAndPreview.js","utils/utils.js","component/Upload.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync"],"names":["DocumentPreview","state","numPages","pageNumber","url","this","props","width","height","data","type","Component","DownloadAndPreview","downloadPDF","window","open","sessionStorage","getItem","setState","Fragment","className","onClick","React","fileToBase64","file","Promise","resolve","reader","FileReader","onload","event","target","result","readAsDataURL","fileToBase64Async","then","encodedImage","console","log","replace","body","base64File","filename","encodeURIComponent","name","Upload","getPDFUrl","uploadResult","_self","AWS","config","update","region","accessKeyId","secretAccessKey","lambda","Lambda","params","FunctionName","Payload","JSON","stringify","invoke","promise","err","alert","message","self","payload","bodyObject","parse","convertedFileUrl","pdfFileURL","setItem","history","push","UploadHandler","a","files","Utils","id","onChange","bind","App","exact","path","component","Boolean","location","hostname","match","pdfjs","GlobalWorkerOptions","workerSrc","version","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","webpackEmptyContext","req","e","Error","code","keys","module","exports"],"mappings":"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","file":"static/js/main.95829669.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import { Document, Page } from 'react-pdf';\n\n\nclass DocumentPreview extends Component {\n  state = {\n    numPages: null,\n    pageNumber: 1,\n  }\n \n \n  render() {\n    const { url } = this.props;\n\n \n    return (\n      <div>\n          <object width=\"100%\" height=\"500\" data={url} type=\"application/pdf\">   </object>\n      </div>\n    );\n  }\n}\n\n\nexport default DocumentPreview;","import React from 'react';\r\nimport './style.css'\r\n\r\nimport DocumentPreview from './DocumentPreview'\r\n\r\nclass DownloadAndPreview extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            url: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let url = sessionStorage.getItem(\"pdfurl\");\r\n        this.setState({\r\n            url: url\r\n        })\r\n    }\r\n\r\n    downloadPDF = () => {\r\n        window.open(this.state.url, '_blank');\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                \r\n                <div className=\"cols\">\r\n                <label>Download and Preview File </label>\r\n                <ul>\r\n                    <li>\r\n                        <div className=\"downloadLink\">\r\n                        <button className=\"downloadIcon\" onClick={this.downloadPDF}>Download</button> \r\n                        </div>\r\n                    </li>\r\n                    <li>\r\n                    <DocumentPreview url={this.state.url}></DocumentPreview>\r\n                    </li>\r\n                    \r\n              \r\n                </ul>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default DownloadAndPreview;","export function fileToBase64(file) {\r\n    return fileToBase64Async(file).then(result => {\r\n        var encodedImage = result;\r\n        console.log(\"encodedImage:\" + encodedImage)\r\n        var data = null;\r\n        if(file.type ===\"image/jpeg\" || file.type === \"image/jpg\" || file.type === \"image/png\")\r\n            data = encodedImage.replace(/^data:image\\/\\w+;base64,/, \"\");\r\n        else\r\n            data = encodedImage.replace(/^data:.*?;base64,/, \"\")\r\n        //data = encodedImage.replace(/^data:application\\/octet-stream\\/\\w+;base64,/, \"\");\r\n        console.log(\"data:\" + data)\r\n\r\n        return {\r\n            body: {\r\n                base64File: data,\r\n                filename: encodeURIComponent(file.name)\r\n            }\r\n        }\r\n    });\r\n\r\n}\r\n\r\nfunction fileToBase64Async(file) {\r\n    let res = new Promise(resolve => {\r\n        var reader = new FileReader();\r\n        reader.onload = function (event) {\r\n            resolve(event.target.result);\r\n            //aImg.src = event.target.result;\r\n        };\r\n        reader.readAsDataURL(file);\r\n    });\r\n    return res;\r\n\r\n\r\n}","import React from 'react';\r\nimport './style.css'\r\nimport * as Utils from '../utils/utils.js'\r\n\r\n\r\nclass Upload extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    getPDFUrl = (data, uploadResult) => {\r\n        let _self = this;\r\n        window.AWS.config.update({\r\n            region: 'us-east-1',\r\n            accessKeyId: \"AKIAY7HGLAGUTSC2CDHD\",\r\n            secretAccessKey: \"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\"\r\n        });\r\n        var lambda = new window.AWS.Lambda();\r\n        var params = {\r\n            FunctionName: 'convert-to-pdf',\r\n            Payload: JSON.stringify(data)\r\n\r\n        };\r\n\r\n        var upload = lambda.invoke(params);\r\n        var promise = upload.promise();\r\n\r\n        promise.then(\r\n            function (data) {\r\n                uploadResult(data, _self);\r\n            },\r\n            function (err) {\r\n                alert(\"There was an error uploading file: \", err.message);\r\n                uploadResult(data, _self);\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n\r\n    uploadResult = (data, self) => {\r\n\r\n        if (data) {\r\n            let payload = data.Payload;\r\n            let bodyObject = JSON.parse(payload);\r\n            if (typeof bodyObject === \"string\") {\r\n                bodyObject = JSON.parse(bodyObject);\r\n            }\r\n            let convertedFileUrl = (bodyObject.body.pdfFileURL);\r\n            sessionStorage.setItem(\"pdfurl\", convertedFileUrl)\r\n            self.props.history.push(\"/download\")\r\n        }\r\n    }\r\n\r\n    UploadHandler = async (event) => {\r\n        let file = event.target.files[0];\r\n        if (file) {\r\n            //let id = \"fileupload\";\r\n            await Utils.fileToBase64(file).then(data => {\r\n                console.log(\"content:\" + data)\r\n                this.getPDFUrl(data, this.uploadResult);\r\n\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <label>Upload a File to Convert to PDF</label>\r\n                    <div  className=\"uploade-file\">\r\n                    <div className=\"col\">\r\n                        <input type=\"file\" name=\"photo\"\r\n                            id=\"fileupload\"\r\n                            onChange={this.UploadHandler.bind(this)} \r\n                            />\r\n                    </div>\r\n                    </div>\r\n                    <button className=\"submit\">Upload!</button>\r\n                </div>\r\n            </div>\r\n        );\r\n        }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default Upload;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport DownloadAndPreview from './component/DownloadAndPreview'\nimport Upload from './/component/Upload'\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n  }\n\n  render() {\n \n    return (\n      <BrowserRouter>\n      <div className=\"container\">\n        <div className=\"row\">         \n          <Switch>\n              <Route exact path=\"/\"  {...this.props} component={Upload} />\n              <Route path=\"/download\"   {...this.props} component={DownloadAndPreview} />\n            </Switch>\n        </div>\n      </div>\n      </BrowserRouter>\n    )\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { pdfjs } from 'react-pdf';\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 30;"],"sourceRoot":""}